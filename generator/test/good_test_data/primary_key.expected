// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

class IntPK extends _IntPK with RealmEntity, RealmObject {
  IntPK(
    int id,
  ) {
    _idProperty.setValue(this, id);
  }

  IntPK._();

  static const _idProperty = ValueProperty<int>(
    'id',
    RealmPropertyType.int,
    primaryKey: true,
  );
  @override
  int get id => _idProperty.getValue(this);
  @override
  set id(int value) => throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<IntPK>> get changes => RealmObject.getChanges(this);

  static const schema = SchemaObject<IntPK>(
    IntPK._,
    'IntPK',
    {
      'id': _idProperty,
    },
    _idProperty,
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}

class StringPK extends _StringPK with RealmEntity, RealmObject {
  StringPK(
    String id,
  ) {
    _idProperty.setValue(this, id);
  }

  StringPK._();

  static const _idProperty = ValueProperty<String>(
    'id',
    RealmPropertyType.string,
    primaryKey: true,
  );
  @override
  String get id => _idProperty.getValue(this);
  @override
  set id(String value) => throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<StringPK>> get changes =>
      RealmObject.getChanges(this);

  static const schema = SchemaObject<StringPK>(
    StringPK._,
    'StringPK',
    {
      'id': _idProperty,
    },
    _idProperty,
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}

class ObjectIdPK extends _ObjectIdPK with RealmEntity, RealmObject {
  ObjectIdPK(
    ObjectId id,
  ) {
    _idProperty.setValue(this, id);
  }

  ObjectIdPK._();

  static const _idProperty = ValueProperty<ObjectId>(
    'id',
    RealmPropertyType.objectid,
    primaryKey: true,
  );
  @override
  ObjectId get id => _idProperty.getValue(this);
  @override
  set id(ObjectId value) => throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<ObjectIdPK>> get changes =>
      RealmObject.getChanges(this);

  static const schema = SchemaObject<ObjectIdPK>(
    ObjectIdPK._,
    'ObjectIdPK',
    {
      'id': _idProperty,
    },
    _idProperty,
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}

class UuidPK extends _UuidPK with RealmEntity, RealmObject {
  UuidPK(
    Uuid id,
  ) {
    _idProperty.setValue(this, id);
  }

  UuidPK._();

  static const _idProperty = ValueProperty<Uuid>(
    'id',
    RealmPropertyType.uuid,
    primaryKey: true,
  );
  @override
  Uuid get id => _idProperty.getValue(this);
  @override
  set id(Uuid value) => throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<UuidPK>> get changes =>
      RealmObject.getChanges(this);

  static const schema = SchemaObject<UuidPK>(
    UuidPK._,
    'UuidPK',
    {
      'id': _idProperty,
    },
    _idProperty,
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}
