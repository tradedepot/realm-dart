// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

class Original extends $Original with RealmEntity, RealmObject {
  Original({
    int primitiveProperty = 0,
    Original? objectProperty,
    Iterable<Original> listProperty = const [],
  }) {
    _primitivePropertyProperty.setValue(this, primitiveProperty);
    _objectPropertyProperty.setValue(this, objectProperty);
    _listPropertyProperty.setValue(this, RealmList<Original>(listProperty));
  }

  Original._();

  static const _primitivePropertyProperty = ValueProperty<int>(
    'remapped primitive',
    RealmPropertyType.int,
    defaultValue: 0,
  );
  @override
  int get primitiveProperty => _primitivePropertyProperty.getValue(this);
  @override
  set primitiveProperty(int value) =>
      _primitivePropertyProperty.setValue(this, value);

  static const _objectPropertyProperty =
      ObjectProperty<Original>('remapped object');
  @override
  Original? get objectProperty => _objectPropertyProperty.getValue(this);
  @override
  set objectProperty(covariant Original? value) =>
      _objectPropertyProperty.setValue(this, value);

  static const _listPropertyProperty =
      ListProperty<Original>('remapped list', RealmPropertyType.object);
  @override
  RealmList<Original> get listProperty => _listPropertyProperty.getValue(this);
  @override
  set listProperty(covariant RealmList<Original> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<Original>> get changes =>
      RealmObject.getChanges(this);

  static const schema = SchemaObject<Original>(
    Original._,
    'another type',
    {
      'remapped primitive': _primitivePropertyProperty,
      'remapped object': _objectPropertyProperty,
      'remapped list': _listPropertyProperty,
    },
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}
