// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

class Foo extends _Foo with RealmEntity, RealmObject {
  Foo({
    int x = 0,
  }) {
    _xProperty.setValue(this, x);
  }

  Foo._();

  static const _xProperty = ValueProperty<int>(
    'x',
    RealmPropertyType.int,
    defaultValue: 0,
  );
  @override
  int get x => _xProperty.getValue(this);
  @override
  set x(int value) => _xProperty.setValue(this, value);

  @override
  Stream<RealmObjectChanges<Foo>> get changes => RealmObject.getChanges(this);

  static const schema = SchemaObject<Foo>(
    Foo._,
    'MyFoo',
    {
      'x': _xProperty,
    },
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}

class Bar extends _Bar with RealmEntity, RealmObject {
  Bar(
    String id,
    bool aBool,
    bool another,
    ObjectId objectId, {
    Uint8List data = Uint8List(16),
    DateTime timestamp = DateTime.now(),
    double aDouble = 0.0,
    Foo? foo,
    String? anOptionalString,
    Iterable<int> list = const [],
  }) {
    _idProperty.setValue(this, id);
    _aBoolProperty.setValue(this, aBool);
    _anotherProperty.setValue(this, another);
    _dataProperty.setValue(this, data);
    _timestampProperty.setValue(this, timestamp);
    _aDoubleProperty.setValue(this, aDouble);
    _fooProperty.setValue(this, foo);
    _anOptionalStringProperty.setValue(this, anOptionalString);
    _objectIdProperty.setValue(this, objectId);
    _listProperty.setValue(this, RealmList<int>(list));
  }

  Bar._();

  static const _idProperty = ValueProperty<String>(
    'id',
    RealmPropertyType.string,
    primaryKey: true,
  );
  @override
  String get id => _idProperty.getValue(this);
  @override
  set id(String value) => throw RealmUnsupportedSetError();

  static const _aBoolProperty = ValueProperty<bool>(
    'aBool',
    RealmPropertyType.bool,
  );
  @override
  bool get aBool => _aBoolProperty.getValue(this);
  @override
  set aBool(bool value) => _aBoolProperty.setValue(this, value);

  static const _anotherProperty = ValueProperty<bool>(
    'another',
    RealmPropertyType.bool,
  );
  @override
  bool get another => _anotherProperty.getValue(this);
  @override
  set another(bool value) => _anotherProperty.setValue(this, value);

  static const _dataProperty = ValueProperty<Uint8List>(
    'data',
    RealmPropertyType.binary,
    defaultValue: Uint8List(16),
  );
  @override
  Uint8List get data => _dataProperty.getValue(this);
  @override
  set data(Uint8List value) => _dataProperty.setValue(this, value);

  static const _timestampProperty = ValueProperty<DateTime>(
    'tidspunkt',
    RealmPropertyType.timestamp,
    defaultValue: DateTime.now(),
  );
  @override
  DateTime get timestamp => _timestampProperty.getValue(this);
  @override
  set timestamp(DateTime value) => _timestampProperty.setValue(this, value);

  static const _aDoubleProperty = ValueProperty<double>(
    'aDouble',
    RealmPropertyType.double,
    defaultValue: 0.0,
  );
  @override
  double get aDouble => _aDoubleProperty.getValue(this);
  @override
  set aDouble(double value) => _aDoubleProperty.setValue(this, value);

  static const _fooProperty = ObjectProperty<Foo>('foo');
  @override
  Foo? get foo => _fooProperty.getValue(this);
  @override
  set foo(covariant Foo? value) => _fooProperty.setValue(this, value);

  static const _listProperty = ListProperty<int>('list', RealmPropertyType.int);
  @override
  RealmList<int> get list => _listProperty.getValue(this);
  @override
  set list(covariant RealmList<int> value) => throw RealmUnsupportedSetError();

  static const _anOptionalStringProperty = ValueProperty<String?>(
    'anOptionalString',
    RealmPropertyType.string,
  );
  @override
  String? get anOptionalString => _anOptionalStringProperty.getValue(this);
  @override
  set anOptionalString(String? value) =>
      _anOptionalStringProperty.setValue(this, value);

  static const _objectIdProperty = ValueProperty<ObjectId>(
    'objectId',
    RealmPropertyType.objectid,
  );
  @override
  ObjectId get objectId => _objectIdProperty.getValue(this);
  @override
  set objectId(ObjectId value) => _objectIdProperty.setValue(this, value);

  @override
  Stream<RealmObjectChanges<Bar>> get changes => RealmObject.getChanges(this);

  static const schema = SchemaObject<Bar>(
    Bar._,
    'Bar',
    {
      'id': _idProperty,
      'aBool': _aBoolProperty,
      'another': _anotherProperty,
      'data': _dataProperty,
      'tidspunkt': _timestampProperty,
      'aDouble': _aDoubleProperty,
      'foo': _fooProperty,
      'list': _listProperty,
      'anOptionalString': _anOptionalStringProperty,
      'objectId': _objectIdProperty,
    },
    _idProperty,
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}

class PrimitiveTypes extends _PrimitiveTypes with RealmEntity, RealmObject {
  PrimitiveTypes(
    String stringProp,
    bool boolProp,
    DateTime dateProp,
    double doubleProp,
    ObjectId objectIdProp,
  ) {
    _stringPropProperty.setValue(this, stringProp);
    _boolPropProperty.setValue(this, boolProp);
    _datePropProperty.setValue(this, dateProp);
    _doublePropProperty.setValue(this, doubleProp);
    _objectIdPropProperty.setValue(this, objectIdProp);
  }

  PrimitiveTypes._();

  static const _stringPropProperty = ValueProperty<String>(
    'stringProp',
    RealmPropertyType.string,
  );
  @override
  String get stringProp => _stringPropProperty.getValue(this);
  @override
  set stringProp(String value) => _stringPropProperty.setValue(this, value);

  static const _boolPropProperty = ValueProperty<bool>(
    'boolProp',
    RealmPropertyType.bool,
  );
  @override
  bool get boolProp => _boolPropProperty.getValue(this);
  @override
  set boolProp(bool value) => _boolPropProperty.setValue(this, value);

  static const _datePropProperty = ValueProperty<DateTime>(
    'dateProp',
    RealmPropertyType.timestamp,
  );
  @override
  DateTime get dateProp => _datePropProperty.getValue(this);
  @override
  set dateProp(DateTime value) => _datePropProperty.setValue(this, value);

  static const _doublePropProperty = ValueProperty<double>(
    'doubleProp',
    RealmPropertyType.double,
  );
  @override
  double get doubleProp => _doublePropProperty.getValue(this);
  @override
  set doubleProp(double value) => _doublePropProperty.setValue(this, value);

  static const _objectIdPropProperty = ValueProperty<ObjectId>(
    'objectIdProp',
    RealmPropertyType.objectid,
  );
  @override
  ObjectId get objectIdProp => _objectIdPropProperty.getValue(this);
  @override
  set objectIdProp(ObjectId value) =>
      _objectIdPropProperty.setValue(this, value);

  @override
  Stream<RealmObjectChanges<PrimitiveTypes>> get changes =>
      RealmObject.getChanges(this);

  static const schema = SchemaObject<PrimitiveTypes>(
    PrimitiveTypes._,
    'PrimitiveTypes',
    {
      'stringProp': _stringPropProperty,
      'boolProp': _boolPropProperty,
      'dateProp': _datePropProperty,
      'doubleProp': _doublePropProperty,
      'objectIdProp': _objectIdPropProperty,
    },
  );
  @override
  Map<String, ValueProperty> get properties => schema.properties;
}
